"use strict";
exports.__esModule = true;
var index_1 = require("../src/index");
var assert_1 = require("assert");
describe("Harry books test", function () {
    it("Should return an array initialized with the price of the books bought after apply the discount", function () {
        var cart = new Map();
        cart.set(1, 2);
        cart.set(2, 2);
        var _a = index_1.initArray(cart), basket = _a[0], dp = _a[1];
        assert_1.strict.ok(basket.length > 0);
        assert_1.strict.ok(dp.length === Math.pow(2, 5));
    });
    it("Should return true if an intermediate solution is valid, otherwise returns false", function () {
        var basket = [2, 2, 0, 0, 0];
        var si = [];
        var aux = [0, 0, 0, 0, 1];
        assert_1.strict.ok(!index_1.solution(basket, si, aux));
        aux = [0, 0, 0, 1, 0];
        assert_1.strict.ok(!index_1.solution(basket, si, aux));
        aux = [0, 0, 1, 0, 0];
        assert_1.strict.ok(!index_1.solution(basket, si, aux));
        aux = [0, 1, 0, 0, 0];
        assert_1.strict.ok(index_1.solution(basket, si, aux));
        aux = [1, 0, 0, 0, 0];
        assert_1.strict.ok(index_1.solution(basket, si, aux));
        aux = [2, 0, 0, 0, 0];
        assert_1.strict.ok(index_1.solution(basket, si, aux));
        aux = [0, 2, 0, 2, 0];
        assert_1.strict.ok(!index_1.solution(basket, si, aux));
        aux = [2, 2, 0, 0, 0];
        assert_1.strict.ok(index_1.solution(basket, si, aux));
        aux = [3, 0, 0, 0, 0];
        assert_1.strict.ok(!index_1.solution(basket, si, aux));
        si = [[1, 0, 0, 0, 0]];
        aux = [0, 0, 0, 1, 0];
        assert_1.strict.ok(!index_1.solution(basket, si, aux));
        aux = [0, 0, 1, 0, 0];
        assert_1.strict.ok(!index_1.solution(basket, si, aux));
        aux = [0, 1, 0, 0, 0];
        assert_1.strict.ok(index_1.solution(basket, si, aux));
        aux = [1, 0, 0, 0, 0];
        assert_1.strict.ok(index_1.solution(basket, si, aux));
        si = [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0]];
        aux = [0, 0, 1, 1, 1];
        assert_1.strict.ok(!index_1.solution(basket, si, aux));
        aux = [1, 0, 0, 0, 0];
        assert_1.strict.ok(index_1.solution(basket, si, aux));
        aux = [0, 1, 0, 0, 0];
        assert_1.strict.ok(index_1.solution(basket, si, aux));
        aux = [1, 1, 0, 0, 0];
        assert_1.strict.ok(index_1.solution(basket, si, aux));
    });
    it("Should return true if the initial solution is a good solution. This good solution must not be the best solution", function () {
        var basket = [2, 2, 0, 0, 0];
        var si = [[0, 1, 0, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0]];
        assert_1.strict.ok(index_1.validSolution(basket, si));
        si = [[0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]];
        assert_1.strict.ok(index_1.validSolution(basket, si));
        si = [[0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0]];
        assert_1.strict.ok(!index_1.validSolution(basket, si));
        si = [[0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0]];
        assert_1.strict.ok(!index_1.validSolution(basket, si));
        si = [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0]];
        assert_1.strict.ok(index_1.validSolution(basket, si));
        si = [[1, 1, 0, 0, 0], [1, 0, 0, 0, 0]];
        assert_1.strict.ok(!index_1.validSolution(basket, si));
        si = [[0, 1, 0, 0, 0], [1, 1, 0, 0, 0]];
        assert_1.strict.ok(!index_1.validSolution(basket, si));
    });
    it("Should return the best price for the cart", function () {
        var cart = new Map();
        cart.set(1, 2);
        cart.set(2, 2);
        cart.set(3, 0);
        cart.set(4, 0);
        cart.set(5, 0);
        assert_1.strict.ok(30.40 === index_1.checkOut(cart));
        cart.set(1, 2);
        cart.set(2, 2);
        cart.set(3, 2);
        cart.set(4, 1);
        cart.set(5, 1);
        assert_1.strict.ok(51.20 === index_1.checkOut(cart));
        cart.set(1, 2);
        cart.set(2, 0);
        cart.set(3, 2);
        cart.set(4, 0);
        cart.set(5, 0);
        assert_1.strict.ok(30.40 === index_1.checkOut(cart));
        cart.set(1, 0);
        cart.set(2, 0);
        cart.set(3, 2);
        cart.set(4, 0);
        cart.set(5, 0);
        assert_1.strict.ok(16.00 === index_1.checkOut(cart));
        cart.set(1, 0);
        cart.set(2, 0);
        cart.set(3, 0);
        cart.set(4, 1);
        cart.set(5, 1);
        assert_1.strict.ok(15.20 === index_1.checkOut(cart));
        cart.set(1, 1);
        cart.set(2, 1);
        cart.set(3, 1);
        cart.set(4, 1);
        cart.set(5, 1);
        assert_1.strict.ok(30.00 === index_1.checkOut(cart));
        cart.set(1, 2);
        cart.set(2, 1);
        cart.set(3, 1);
        cart.set(4, 1);
        cart.set(5, 1);
        assert_1.strict.ok(38.00 === index_1.checkOut(cart));
    });
});
